/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include "../src/sc_types.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_cyclebased.h"
#include "../src/sc_timer.h"
#include <string.h>

/*! \file
Header of the state machine 'Statechart'.
*/


/*! Define indices of states in the StateConfVector */
#define SCVI_MAIN_REGION_IDLE 0
#define SCVI_MAIN_REGION_BLINK 0
#define SCVI_MAIN_REGION_BLINK_R1_OFF 0
#define SCVI_MAIN_REGION_BLINK_R1_ON 0


class Statechart : public sc::timer::TimedInterface, public sc::CycleBasedInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			main_region_Idle,
			main_region_Blink,
			main_region_Blink_r1_Off,
			main_region_Blink_r1_On
		} StatechartStates;
					
		static const sc_integer numStates = 4;
		
		
		/*! Raises the in event 'toggle' that is defined in the default interface scope. */
		void raiseToggle();
		
		/*! Gets the value of the variable 'delay' that is defined in the default interface scope. */
		sc_integer getDelay() const;
		/*! Sets the value of the variable 'delay' that is defined in the default interface scope. */
		void setDelay(sc_integer delay);
		/*! Gets the value of the variable 'temp' that is defined in the default interface scope. */
		sc_integer getTemp() const;
		/*! Sets the value of the variable 'temp' that is defined in the default interface scope. */
		void setTemp(sc_integer temp);
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void pinMode(sc_integer pin, sc_integer mode) = 0;
				
				virtual void digitalWrite(sc_integer pin, sc_integer value) = 0;
				
				virtual sc_integer readTemp() = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback);
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		void runCycle();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService_);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 2;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		sc_integer low;
		sc_integer high;
		sc_integer output;
		sc_integer led_pin;
		
		sc_integer delay;
		sc_integer temp;
		sc_boolean toggle_raised;
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		
		OperationCallback* ifaceOperationCallback;
		
		typedef struct {
			sc_boolean toggle_raised;
		}StatechartIfaceEvBuf;
		typedef struct {
			sc_boolean Statechart_main_region_Blink_r1_Off_time_event_0_raised;
			sc_boolean Statechart_main_region_Blink_r1_On_time_event_0_raised;
		}StatechartTimeEventsEvBuf;
		typedef struct {
			StatechartIfaceEvBuf iface;
			StatechartTimeEventsEvBuf timeEvents;
		}StatechartEvBuf;
		StatechartEvBuf current;
		sc_boolean isExecuting;
		
		
		
		// prototypes of all internal functions
		
		void enact_main_region_Blink_r1_Off();
		void enact_main_region_Blink_r1_On();
		void exact_main_region_Blink_r1_Off();
		void exact_main_region_Blink_r1_On();
		void enseq_main_region_Idle_default();
		void enseq_main_region_Blink_default();
		void enseq_main_region_Blink_r1_Off_default();
		void enseq_main_region_Blink_r1_On_default();
		void enseq_main_region_default();
		void enseq_main_region_Blink_r1_default();
		void exseq_main_region_Idle();
		void exseq_main_region_Blink();
		void exseq_main_region_Blink_r1_Off();
		void exseq_main_region_Blink_r1_On();
		void exseq_main_region();
		void exseq_main_region_Blink_r1();
		void react_main_region__entry_Default();
		void react_main_region_Blink_r1__entry_Default();
		sc_integer main_region_Idle_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_r1_Off_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_r1_On_react(const sc_integer transitioned_before);
		void swapInEvents();
		void clearInEvents();
		void microStep();
		
		
		/*! Sets the value of the variable 'low' that is defined in the internal scope. */
		void setLow(sc_integer low);
		/*! Sets the value of the variable 'high' that is defined in the internal scope. */
		void setHigh(sc_integer high);
		/*! Sets the value of the variable 'output' that is defined in the internal scope. */
		void setOutput(sc_integer output);
		/*! Sets the value of the variable 'led_pin' that is defined in the internal scope. */
		void setLed_pin(sc_integer led_pin);
		
		
};


inline Statechart::OperationCallback::~OperationCallback() {}


#endif /* STATECHART_H_ */
