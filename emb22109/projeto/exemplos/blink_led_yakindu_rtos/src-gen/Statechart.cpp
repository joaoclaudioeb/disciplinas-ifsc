/* Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	low(0),
	high(1),
	output(1),
	led_pin(25),
	initEvent_raised(false),
	endEvent_raised(false),
	minTempEvent_raised(false),
	maxTempEvent_raised(false),
	ifaceOperationCallback(sc_null),
	isExecuting(false)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!inEventQueue.empty()) {
		statechart_events::SctEvent* nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
		delete nextEvent;
	}
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

sc_boolean Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return false;
	}
	switch(event->name)
	{
		case initEvent:
		case endEvent:
		case minTempEvent:
		case maxTempEvent:
		{
			return iface_dispatch_event(event);
		}
		default:
			delete event;
			return false;
	}
}

sc_boolean Statechart::internal_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}
sc_boolean Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case initEvent:
		{
			internal_raiseInitEvent();
			break;
		}
		case endEvent:
		{
			internal_raiseEndEvent();
			break;
		}
		case minTempEvent:
		{
			internal_raiseMinTempEvent();
			break;
		}
		case maxTempEvent:
		{
			internal_raiseMaxTempEvent();
			break;
		}
		default:
			delete event;
			return false;
	}
	delete event;
	return true;
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Statechart::isFinal() const
{
	   return false;
}

sc_boolean Statechart::check(){
	if (this->ifaceOperationCallback == sc_null) {
		return false;
	}
	return true;
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case main_region_Idle :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_IDLE] == main_region_Idle);
			break;
		}
		case main_region_Blink :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_BLINK] >= main_region_Blink && stateConfVector[SCVI_MAIN_REGION_BLINK] <= main_region_Blink_r1_Off);
			break;
		}
		case main_region_Blink_r1_On :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_BLINK_R1_ON] == main_region_Blink_r1_On);
			break;
		}
		case main_region_Blink_r1_Off :
		{
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_BLINK_R1_OFF] == main_region_Blink_r1_Off);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void Statechart::setLow(sc_integer low_)
{
	this->low = low_;
}
void Statechart::setHigh(sc_integer high_)
{
	this->high = high_;
}
void Statechart::setOutput(sc_integer output_)
{
	this->output = output_;
}
void Statechart::setLed_pin(sc_integer led_pin_)
{
	this->led_pin = led_pin_;
}
/* Functions for event initEvent in interface  */
void Statechart::raiseInitEvent()
{
	inEventQueue.push_back(new SctEvent__initEvent(initEvent));
        runCycle();
}
void Statechart::internal_raiseInitEvent()
{
	initEvent_raised = true;
}
/* Functions for event endEvent in interface  */
void Statechart::raiseEndEvent()
{
	inEventQueue.push_back(new SctEvent__endEvent(endEvent));
        runCycle();
}
void Statechart::internal_raiseEndEvent()
{
	endEvent_raised = true;
}
/* Functions for event minTempEvent in interface  */
void Statechart::raiseMinTempEvent()
{
	inEventQueue.push_back(new SctEvent__minTempEvent(minTempEvent));
        runCycle();
}
void Statechart::internal_raiseMinTempEvent()
{
	minTempEvent_raised = true;
}
/* Functions for event maxTempEvent in interface  */
void Statechart::raiseMaxTempEvent()
{
	inEventQueue.push_back(new SctEvent__maxTempEvent(maxTempEvent));
        runCycle();
}
void Statechart::internal_raiseMaxTempEvent()
{
	maxTempEvent_raised = true;
}
void Statechart::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
/* Entry action for state 'Idle'. */
void Statechart::enact_main_region_Idle()
{
	/* Entry action for state 'Idle'. */
	ifaceOperationCallback->pinMode(led_pin, output);
}

/* Entry action for state 'On'. */
void Statechart::enact_main_region_Blink_r1_On()
{
	/* Entry action for state 'On'. */
	ifaceOperationCallback->digitalWrite(led_pin, high);
}

/* Entry action for state 'Off'. */
void Statechart::enact_main_region_Blink_r1_Off()
{
	/* Entry action for state 'Off'. */
	ifaceOperationCallback->digitalWrite(led_pin, low);
}

/* 'default' enter sequence for state Idle */
void Statechart::enseq_main_region_Idle_default()
{
	/* 'default' enter sequence for state Idle */
	enact_main_region_Idle();
	stateConfVector[0] = main_region_Idle;
}

/* 'default' enter sequence for state Blink */
void Statechart::enseq_main_region_Blink_default()
{
	/* 'default' enter sequence for state Blink */
	enseq_main_region_Blink_r1_default();
}

/* 'default' enter sequence for state On */
void Statechart::enseq_main_region_Blink_r1_On_default()
{
	/* 'default' enter sequence for state On */
	enact_main_region_Blink_r1_On();
	stateConfVector[0] = main_region_Blink_r1_On;
}

/* 'default' enter sequence for state Off */
void Statechart::enseq_main_region_Blink_r1_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_main_region_Blink_r1_Off();
	stateConfVector[0] = main_region_Blink_r1_Off;
}

/* 'default' enter sequence for region main region */
void Statechart::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Statechart::enseq_main_region_Blink_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_Blink_r1__entry_Default();
}

/* Default exit sequence for state Idle */
void Statechart::exseq_main_region_Idle()
{
	/* Default exit sequence for state Idle */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state Blink */
void Statechart::exseq_main_region_Blink()
{
	/* Default exit sequence for state Blink */
	exseq_main_region_Blink_r1();
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state On */
void Statechart::exseq_main_region_Blink_r1_On()
{
	/* Default exit sequence for state On */
	stateConfVector[0] = main_region_Blink;
}

/* Default exit sequence for state Off */
void Statechart::exseq_main_region_Blink_r1_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[0] = main_region_Blink;
}

/* Default exit sequence for region main region */
void Statechart::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Statechart.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_Idle :
		{
			exseq_main_region_Idle();
			break;
		}
		case main_region_Blink :
		{
			exseq_main_region_Blink();
			break;
		}
		case main_region_Blink_r1_On :
		{
			exseq_main_region_Blink_r1_On();
			break;
		}
		case main_region_Blink_r1_Off :
		{
			exseq_main_region_Blink_r1_Off();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Statechart::exseq_main_region_Blink_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Statechart.main_region.Blink.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_Blink_r1_On :
		{
			exseq_main_region_Blink_r1_On();
			break;
		}
		case main_region_Blink_r1_Off :
		{
			exseq_main_region_Blink_r1_Off();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_Idle_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_main_region_Blink_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_Blink_r1_On_default();
}

sc_integer Statechart::main_region_Idle_react(const sc_integer transitioned_before) {
	/* The reactions of state Idle. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (initEvent_raised)
		{ 
			exseq_main_region_Idle();
			enseq_main_region_Blink_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_Blink_react(const sc_integer transitioned_before) {
	/* The reactions of state Blink. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (endEvent_raised)
		{ 
			exseq_main_region_Blink();
			enseq_main_region_Idle_default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_Blink_r1_On_react(const sc_integer transitioned_before) {
	/* The reactions of state On. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (maxTempEvent_raised)
		{ 
			exseq_main_region_Blink_r1_On();
			enseq_main_region_Blink_r1_Off_default();
			main_region_Blink_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_Blink_react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::main_region_Blink_r1_Off_react(const sc_integer transitioned_before) {
	/* The reactions of state Off. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (minTempEvent_raised)
		{ 
			exseq_main_region_Blink_r1_Off();
			enseq_main_region_Blink_r1_On_default();
			main_region_Blink_react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = main_region_Blink_react(transitioned_before);
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	initEvent_raised = false;
	endEvent_raised = false;
	minTempEvent_raised = false;
	maxTempEvent_raised = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_Idle :
		{
			main_region_Idle_react(-1);
			break;
		}
		case main_region_Blink_r1_On :
		{
			main_region_Blink_r1_On_react(-1);
			break;
		}
		case main_region_Blink_r1_Off :
		{
			main_region_Blink_r1_Off_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
	} while (dispatch_event(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_main_region();
	stateConfVector[0] = Statechart_last_state;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


