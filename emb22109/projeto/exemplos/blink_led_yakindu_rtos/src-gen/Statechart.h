/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "../src/sc_types.h"
#include "../src/sc_statemachine.h"
#include "../src/sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'Statechart'.
*/


#ifndef SCT_EVENTS_STATECHART_H
#define SCT_EVENTS_STATECHART_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace statechart_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	initEvent,
	endEvent,
	minTempEvent,
	maxTempEvent
} StatechartEventName;

class SctEvent
{
	public:
		SctEvent(StatechartEventName name_) : name(name_){}
		virtual ~SctEvent(){}
		const StatechartEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(StatechartEventName name_, T value_) :
			SctEvent(name_),
			value(value_)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent__initEvent : public SctEvent
{
	public:
		SctEvent__initEvent(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__endEvent : public SctEvent
{
	public:
		SctEvent__endEvent(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__minTempEvent : public SctEvent
{
	public:
		SctEvent__minTempEvent(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__maxTempEvent : public SctEvent
{
	public:
		SctEvent__maxTempEvent(StatechartEventName name_) : SctEvent(name_){};
};

}
#endif /* SCT_EVENTS_STATECHART_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_MAIN_REGION_IDLE 0
#define SCVI_MAIN_REGION_BLINK 0
#define SCVI_MAIN_REGION_BLINK_R1_ON 0
#define SCVI_MAIN_REGION_BLINK_R1_OFF 0


class Statechart : public sc::EventDrivenInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			main_region_Idle,
			main_region_Blink,
			main_region_Blink_r1_On,
			main_region_Blink_r1_Off
		} StatechartStates;
					
		static const sc_integer numStates = 4;
		
		
		/*! Raises the in event 'initEvent' that is defined in the default interface scope. */
		void raiseInitEvent();
		
		/*! Raises the in event 'endEvent' that is defined in the default interface scope. */
		void raiseEndEvent();
		
		/*! Raises the in event 'minTempEvent' that is defined in the default interface scope. */
		void raiseMinTempEvent();
		
		/*! Raises the in event 'maxTempEvent' that is defined in the default interface scope. */
		void raiseMaxTempEvent();
		
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void pinMode(sc_integer pin, sc_integer mode) = 0;
				
				virtual void digitalWrite(sc_integer pin, sc_integer value) = 0;
				
				virtual sc_integer readTemp() = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback);
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent();
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		
		
	protected:
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		sc_integer low;
		sc_integer high;
		sc_integer output;
		sc_integer led_pin;
		sc_boolean internal_dispatch_event(statechart_events::SctEvent * event);
		
		/*! Raises the in event 'initEvent' that is defined in the default interface scope. */
		void internal_raiseInitEvent();
		sc_boolean initEvent_raised;
		/*! Raises the in event 'endEvent' that is defined in the default interface scope. */
		void internal_raiseEndEvent();
		sc_boolean endEvent_raised;
		/*! Raises the in event 'minTempEvent' that is defined in the default interface scope. */
		void internal_raiseMinTempEvent();
		sc_boolean minTempEvent_raised;
		/*! Raises the in event 'maxTempEvent' that is defined in the default interface scope. */
		void internal_raiseMaxTempEvent();
		sc_boolean maxTempEvent_raised;
		sc_boolean iface_dispatch_event(statechart_events::SctEvent * event);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		
		OperationCallback* ifaceOperationCallback;
		
		sc_boolean isExecuting;
		
		
		
		// prototypes of all internal functions
		
		void enact_main_region_Idle();
		void enact_main_region_Blink_r1_On();
		void enact_main_region_Blink_r1_Off();
		void enseq_main_region_Idle_default();
		void enseq_main_region_Blink_default();
		void enseq_main_region_Blink_r1_On_default();
		void enseq_main_region_Blink_r1_Off_default();
		void enseq_main_region_default();
		void enseq_main_region_Blink_r1_default();
		void exseq_main_region_Idle();
		void exseq_main_region_Blink();
		void exseq_main_region_Blink_r1_On();
		void exseq_main_region_Blink_r1_Off();
		void exseq_main_region();
		void exseq_main_region_Blink_r1();
		void react_main_region__entry_Default();
		void react_main_region_Blink_r1__entry_Default();
		sc_integer main_region_Idle_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_r1_On_react(const sc_integer transitioned_before);
		sc_integer main_region_Blink_r1_Off_react(const sc_integer transitioned_before);
		void clearInEvents();
		void microStep();
		void runCycle();
		
		
		statechart_events::SctEvent* getNextEvent();
		sc_boolean dispatch_event(statechart_events::SctEvent * event);
		std::deque<statechart_events::SctEvent*> inEventQueue;
		
		
		/*! Sets the value of the variable 'low' that is defined in the internal scope. */
		void setLow(sc_integer low);
		/*! Sets the value of the variable 'high' that is defined in the internal scope. */
		void setHigh(sc_integer high);
		/*! Sets the value of the variable 'output' that is defined in the internal scope. */
		void setOutput(sc_integer output);
		/*! Sets the value of the variable 'led_pin' that is defined in the internal scope. */
		void setLed_pin(sc_integer led_pin);
		
		
};


inline Statechart::OperationCallback::~OperationCallback() {}


#endif /* STATECHART_H_ */
